/****************************** this is server part         *****************************************************/
				
      		       else if(!strcmp(command,"select "))
				{
	 				system("cat filename>temp.txt");
	  				i = 0;
          				FILE*f = fopen("filename","r");
          				while(!feof(f))
            				buf[i++] = fgetc(f);
          				buf[i-1] = '\0';
	  				fclose(f);
          				send(sock2, buf, 100, 0);
				}
        
      		      else if(!strcmp(command, "cd "))
        			{
          				if(chdir(buf+3) == 0)
	    				c = 1;
	  				else
	    				c = 0;
          				send(sock2, &c, sizeof(int), 0);
        			}
			      
				     



        





/****************************   this is client part         **********************************************************/			
            case 3:
	  		{
	  			//cout<<"Enter filename to select: ";
	  			//cin>>filename;
	  			strcpy(buf, "select "); //select ...
	  			//strcat(buf, filename); //select filename
			  	send(sock, buf, 100, 0); //sending "select "
					  	recv(sock, buf, 100, 0);
					  	cout<<buf;
			  	/*recv(sock, &size, sizeof(int), 0); //receiving the file size
			  	if(!size)
	    			{
	      				cout<<"No such file on the remote directory\n\n";
	      				break;
	    			}
	 		 	int* f=new int[size];  //f = malloc(size); creating a blank file
	  			recv(sock, f, size, 0); //receiving the file content
	  			while(1)
	    			{
	      				filehandle = open(filename, O_RDONLY, 0660); //file descriptor for an open file
	      				if(filehandle == -1)
					{
		  				perror("Error in file descriptor.");
		  				//sprintf(filename + strlen(filename), "%d", i);//needed only if same directory is used for both server and client
					}
	      				else 
	      					break;
	    			}
	  			write(filehandle, f, size);
	  			close(filehandle);
	  			strcpy(buf, "cat >"); // cat
	  			strcat(buf, filename); //cat filename
	  			system(buf); //command calling*/
	  			break;
	  		}


			case 5:
	  		{
	  			strcpy(buf, "cd ");// storing cd command in buf
	 			cout<<"Enter the path to change the remote directory:\n ";
	  			char path[50]; 
	  			cin>>path;
	  			sscanf(buf, "%s", path);
	  			send(sock, buf, 100, 0);// sending cd pathname to server
	  			recv(sock, &status, sizeof(int), 0);//client receiving pathname from the **client
          			if(status)
            				cout<<"Remote directory successfully changed\n";
          			else
            				cout<<"Remote directory failed to change\n";
          			break;
          		}